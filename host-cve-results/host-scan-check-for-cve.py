#!/usr/bin/env python

from email.policy import default
from operator import ne
import re
import requests
import argparse
import json
import pprint

class TokenAuth(requests.auth.AuthBase):
    def __init__(self, token):
        self.token = token
    def __call__(self, request):
        request.headers['Authorization'] = f'Bearer {self.token}'
        return request


def get_host_cve_results(host, macAddr, url, token, vuln, headers):
    #import pdb; pdb.set_trace()
    hostResults = json.loads(requests.get(f'{url}/api/scanning/v1/hosts/{host}/{macAddr}', auth=TokenAuth(token), headers=headers).content)
    if hostResults['operatingSystem'] == "flatcar":
        nonOsResults = json.loads(requests.get(f'{url}/api/scanning/v1/hosts/{host}/{macAddr}?vtype=non-os', auth=TokenAuth(token), headers=headers).content)
        if vuln == "":
            vulnDict = nonOsResults['vulnerabilities']
        else:
            vulnDict = [vulnData for vulnData in nonOsResults['vulnerabilities'] if vulnData['vuln'] == vuln ]
        cveResult = {
            "hostname": host,
            "lastScanDate": nonOsResults['lastScanDate'],
            "operatingSystem": nonOsResults['operatingSystem'],
            "vulns": vulnDict
        }    
    else:
        if vuln == "":
            vulnDict = hostResults['vulnerabilities']
        else:
            vulnDict = [vulnData for vulnData in hostResults['vulnerabilities'] if vulnData['vuln'] == vuln ]
        cveResult = {
            "hostname": host,
            "lastScanDate": hostResults['lastScanDate'],
            "operatingSystem": hostResults['operatingSystem'],
            "vulns": vulnDict
        }
    return cveResult


def main():

    parser = argparse.ArgumentParser(description="Query sysdig hosts for a CVE")
    parser.add_argument("--sysdig_uri", metavar='U', type=str, help="Sysdig Secure URI", required=True)
    parser.add_argument("--sysdig_token", metavar="T", type=str, help="Sysdig Secure Token to authenticate against the URI", required=True)
    parser.add_argument("--vulnerability", metavar="V", type=str, help="Vulnerability ID as found in Sysdig Secure.", required=False, default="")
    
    args = parser.parse_args()

    sysdig_token = args.sysdig_token
    sysdig_url = args.sysdig_uri
    vulnId = args.vulnerability
    headers = {
        "Content-Type": "application/json",
        "Accept": "*/*",
        "Accept-Encoding": "gzip, deflate, br"
    }
    body = {
        "scope": []
    }
    hostsList = json.loads(requests.post(f'{sysdig_url}/api/scanning/v1/hosts/', auth=TokenAuth(sysdig_token), headers=headers, data=body).content)
    hostDict = { host['hostname']: host['macAddress'] for host in hostsList['results'] if host['stopped'] != True }
    vulnReport = []

    for host in hostDict:
        vulnReport.append(get_host_cve_results(host=host, macAddr=hostDict[host], url=sysdig_url, vuln=vulnId, token=sysdig_token, headers=headers ))
    print(json.dumps({ "results": vulnReport }, indent=4, sort_keys=True))
    return
if __name__ == '__main__':
    main()